name: Deploy to Firebase

on:
    push:
        branches:
            - master

jobs:
    build:
        name: Build and Deploy
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Set environment variables
              run: |
                  echo "BUCKET_NAME=${{ secrets.BUCKET_NAME }}" >> $GITHUB_ENV
                  echo "BASE_DIR=${{ secrets.BASE_DIR }}" >> $GITHUB_ENV
                  echo "GOOGLE_APPLICATION_CREDENTIALS_BASE64=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_BASE64 }}" >> $GITHUB_ENV
                  echo "DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}" >> $GITHUB_ENV
                  echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> $GITHUB_ENV
                  echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> $GITHUB_ENV
                  echo "FIREBASE_TOKEN=${{ secrets.FIREBASE_TOKEN }}" >> $GITHUB_ENV
                  echo "FIREBASE_SERVICE_ACCOUNT_BASE64=${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}" >> $GITHUB_ENV
                  echo "SURFSHARK_PROXY_USERNAME=${{ secrets.SURFSHARK_PROXY_USERNAME }}" >> $GITHUB_ENV
                  echo "SURFSHARK_PROXY_PASSWORD=${{ secrets.SURFSHARK_PROXY_PASSWORD }}" >> $GITHUB_ENV

            - name: Decode Firebase service account key
              run: echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}" | base64 --decode > $GITHUB_WORKSPACE/firebase-key.json

            - name: Decode Google service account key
              run: echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_BASE64 }}" | base64 --decode > $GITHUB_WORKSPACE/google-credentials.json

            - name: Install dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install python3-pip openvpn -y
                  pip3 install -r requirements.txt

            - name: Set up OpenVPN configuration
              run: |
                  mkdir -p /etc/openvpn
                  echo '
                  client
                  dev tun
                  proto tcp
                  remote de-fra.prod.surfshark.com 1443 # Replace with your desired server
                  remote-random
                  nobind
                  tun-mtu 1500
                  mssfix 1450
                  ping 15
                  ping-restart 0
                  reneg-sec 0

                  remote-cert-tls server

                  auth-user-pass /etc/openvpn/credentials.txt

                  #comp-lzo
                  verb 3
                  fast-io
                  cipher AES-256-CBC

                  auth SHA512

                  <ca>
                  -----BEGIN CERTIFICATE-----
                  # Paste the content of Surfshark's CA certificate here
                  -----END CERTIFICATE-----
                  </ca>
                  key-direction 1
                  <tls-auth>
                  #
                  # 2048 bit OpenVPN static key
                  #
                  -----BEGIN OpenVPN Static key V1-----
                  # Paste the content of Surfshark's static key here
                  -----END OpenVPN Static key V1-----
                  </tls-auth>
                  ' | sudo tee /etc/openvpn/surfshark.conf > /dev/null

            - name: Add Surfshark credentials
              run: |
                  echo "${{ secrets.SURFSHARK_PROXY_USERNAME }}" | sudo tee /etc/openvpn/credentials.txt > /dev/null
                  echo "${{ secrets.SURFSHARK_PROXY_PASSWORD }}" | sudo tee -a /etc/openvpn/credentials.txt > /dev/null
                  sudo chmod 600 /etc/openvpn/credentials.txt

            - name: Connect to VPN
              run: |
                  sudo openvpn --config /etc/openvpn/surfshark.conf --daemon
                  sleep 15 # Wait for VPN connection to establish

            - name: Verify VPN connection
              run: |
                  ifconfig tun0 # Check if tun0 interface is up
                  curl -s ifconfig.me # Check public IP address

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '22' # Adjust to your desired Node.js version

            - name: Install NPM dependencies
              run: npm install firebase-tools@13.13.1

            - name: Ensure BASE_DIR exists
              run: mkdir -p ${{ secrets.BASE_DIR }}

            - name: Run Python scripts
              run: |
                  python3 in/in-new.py
                  python3 rw/main.py
              env:
                  BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
                  BASE_DIR: ${{ secrets.BASE_DIR }}
                  GOOGLE_APPLICATION_CREDENTIALS: $GITHUB_WORKSPACE/google-credentials.json
                  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
                  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
                  MONGO_URI: ${{ secrets.MONGO_URI }}

            - name: Deploy to Firebase
              uses: FirebaseExtended/action-hosting-deploy@v0
              with:
                  repoToken: ${{ secrets.GITHUB_TOKEN }}
                  firebaseServiceAccount: $GITHUB_WORKSPACE/firebase-key.json
                  channelId: live
                  projectId: auto-cryptoskopen-1 # Replace with your project ID
                  expires: 7d
                  entryPoint: ${{ secrets.BASE_DIR }}
